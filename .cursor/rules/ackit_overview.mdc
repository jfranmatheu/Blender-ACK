---
description: 
globs: 
alwaysApply: true
---
---
description: ackit module overview
globs: 
alwaysApply: true
---
# ACKIT Module Overview

## Purpose

`ackit` (Addon Creator Kit) is a Python module designed as a comprehensive toolkit to streamline and enhance Blender addon development. Its primary goal is to provide a higher-level abstraction over the standard `bpy` API, reducing boilerplate code, improving code organization, promoting type safety, and simplifying common addon development tasks.

It acts as a framework or library upon which Blender addons can be built more efficiently and maintainably.

## Key Features

*   **Automatic Registration:** Simplifies the registration and unregistration of Blender classes (Operators, Panels, PropertyGroups, Nodes, etc.) by automatically discovering them within the addon's modules.
*   **Structured API (Facade):** Offers a clean and organized entry point (`ACK` class) to access different functionalities like Operator creation, UI element definition, Node Editor components, Data management, and Application-level features (handlers, timers).
*   **Declarative Configuration:** Utilizes decorators extensively to define metadata (labels, tooltips), flags (Undo, Register, Blocking), polling conditions, and other properties directly on class definitions.
*   **Type Safety:** Enhances type safety through:
    *   Typed property wrappers (`PropTyped`) providing better autocompletion and static analysis.
    *   Auto-generated typed helper classes/functions (e.g., for accessing operators, icons, properties).
*   **Code Generation:** Includes tools (`AutoCode`) to automatically generate boilerplate code for operators, icons, and typed property accessors, further reducing manual effort and potential errors.
*   **Modern Blender Support:** Designed with Blender 4.2+ and the Extension Platform (`blender_manifest.toml`) in mind, avoiding legacy patterns like `bl_info` and the `bgl` module.
*   **Modularity:** Encourages a modular addon structure by organizing functionalities into distinct submodules (`core`, `ops`, `ui`, `ne`, `data`, `app`, `utils`, etc.).

## Integration with Addon

`ackit` is typically integrated into a Blender addon as follows:

1.  **Import:** The addon imports necessary components from `ackit`, primarily the `AddonLoader` and potentially the `ACK` facade and `AutoCode`.
2.  **Initialization:** In the addon's root `__init__.py`, `AddonLoader.init_modules()` is called to discover modules and potentially trigger auto-code generation.
3.  **Registration:** The addon's `register()` function calls `AddonLoader.register_modules()` to handle the registration of all discovered classes and module-level `register` callbacks.
4.  **Unregistration:** The addon's `unregister()` function calls `AddonLoader.unregister_modules()` to unregister classes and call `unregister` callbacks in the correct order.
5.  **Usage:** Within the addon's modules, developers use `ackit`'s classes (e.g., `ACK.Ops.Generic`, `ACK.UI.Panel`, `ACK.NE.Node`) and decorators (`@ACK.Ops.add_metadata`, `@ACK.Poll.MODE.OBJECT`, `@ACK.Data.PropertyGroup`) to define addon components and logic.

The `ackit_addon_template` provides a practical example of this integration, demonstrating how `ackit` facilitates the creation of operators, preferences, and other addon elements using the Extension Platform structure. 