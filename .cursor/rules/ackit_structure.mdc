---
description: 
globs: 
alwaysApply: true
---
---
description: ackit module structure
globs: 
alwaysApply: true
---
# ACKIT Module Structure

## Top-Level Structure

```text
ackit/
├── __init__.py         # Exports main facade (ACK), AddonLoader, AutoCode, enums, globals
├── _ack.py             # Defines the ACK facade class, consolidating access to submodules
├── app/                # Application-level components (handlers, keymaps, timers)
│   ├── __init__.py
│   ├── handlers.py
│   ├── keymaps.py
│   └── timer.py
├── auto_code/          # Automatic code generation utilities
│   ├── __init__.py
│   ├── icons.py
│   ├── ops.py
│   └── types.py
├── core/               # Core framework functionalities (registration, loading, base types)
│   ├── __init__.py
│   ├── addon_loader.py   # Class discovery and registration logic
│   ├── auto_load.py      # Legacy auto-loading (discouraged)
│   ├── base_type.py      # Base class for ackit types (adds metadata handling)
│   ├── btypes.py         # Enum for Blender types and class caching (may be refactored)
│   └── reg_utils.py      # Utilities for module scanning, dependency resolution, sorting
├── data/               # Data handling (PropertyGroups, properties, subscriptions)
│   ├── __init__.py
│   ├── btypes/           # (Potentially base PropertyGroup/AddonPrefs wrappers)
│   ├── helpers.py        # Property registration helpers
│   ├── props.py          # Basic property definitions (PropertyTypes enum)
│   ├── props_typed.py    # Typed property wrappers (WrappedTypedPropertyTypes)
│   └── subscriptions.py  # RNA subscription utilities (MsgBus)
├── debug/              # Debugging utilities (logging, profiling)
│   ├── __init__.py
│   ├── logger.py
│   ├── output.py
│   └── profiler.py
├── enums/              # General purpose enumerations
│   ├── __init__.py
│   ├── event.py          # Blender event types/values
│   └── operator.py       # Operator return values (FINISHED, CANCELLED, etc.)
├── flags.py            # Declarative flags for Blender types (Operator, Panel, Node)
├── globals.py          # Global constants and environment info
├── metadata.py         # Declarative metadata decorators (Operator, Node, Socket)
├── ne/                 # Node Editor specific components
│   ├── __init__.py
│   ├── annotations.py    # Public annotations (InputSocket, OutputSocket)
│   ├── annotations_internal.py # Internal implementation for socket annotations
│   ├── btypes/           # Node, NodeSocket, NodeTree base classes
│   │   ├── __init__.py
│   │   ├── node.py
│   │   ├── node_socket.py
│   │   └── node_tree.py
│   ├── categories.py     # Node category management
│   └── socket_types.py   # Predefined NodeSocket subclasses for various data types
├── ops/                # Operator components
│   ├── __init__.py
│   └── btypes/           # Base Operator classes (Generic, Action, Modal)
│       ├── __init__.py
│       ├── action.py
│       ├── generic.py
│       └── modal.py
├── registry/           # (Potentially for custom registries - currently holds props?)
│   └── props/            # (Contents unclear - related to property registration?)
├── types/              # Custom complex types (currently holds node related types?)
│   └── nodes/            # (Contents unclear - specific node structures?)
├── ui/                 # User Interface components
│   ├── __init__.py
│   └── btypes/           # Base UI element classes (Panel, Menu, UIList, etc.)
│       ├── __init__.py
│       ├── base.py
│       ├── menu.py
│       ├── panel.py
│       └── ui_list.py
└── utils/              # General utility functions
    ├── __init__.py
    ├── callback.py       # Simple callback dictionary implementation
    ├── cursor.py         # Cursor management utilities
    ├── event/            # Event handling utilities (capturer, globals)
    │   ├── __init__.py
    │   ├── event_capturer.py
    │   └── event_globals.py
    ├── fs.py             # Filesystem utilities (e.g., is_junction)
    ├── math/             # Math utilities (basic, vector)
    │   ├── __init__.py
    │   ├── basic.py
    │   └── vector.py
    ├── polling.py        # Polling condition decorators
    ├── previews.py       # Icon preview utilities
    └── tool.py           # (Contents unclear - general tool utilities?)
```

## Key Classes and Relationships (Simplified)

```mermaid
classDiagram
    direction LR

    class AddonLoader {
        +init_modules()
        +register_modules()
        +unregister_modules()
        +fetch_module_callbacks()
        +cleanse_modules()
        -modules
        -ordered_classes
        -module_callbacks : CallbackDict
    }

    class reg_utils {
        <<Module>>
        +get_all_submodules()
        +get_ordered_classes_to_register()
        +get_register_deps_dict()
        +toposort()
        +iter_my_classes()
        +iter_my_register_deps()
    }

    class ACK {
        <<Facade>>
        +Poll : Polling
        +Prop : PropertyTypes
        +PropTyped : WrappedTypedPropertyTypes
        +Ops
        +UI
        +NE
        +Data
        +App
    }

    class ACK.Ops {
        +Generic : ops.btypes.Generic
        +Action : ops.btypes.Action
        +Modal : ops.btypes.Modal
        +add_metadata() : Decorator
        +Flags : flags.OPERATOR
    }

    class ACK.UI {
        +Panel : ui.btypes.Panel
        +Menu : ui.btypes.Menu
        +PanelFlags : flags.PANEL
    }

    class ACK.NE {
        +Node : ne.btypes.Node
        +Tree : ne.btypes.NodeTree
        +Socket : ne.btypes.NodeSocket
        +add_node_metadata() : Decorator
        +add_socket_metadata() : Decorator
        +add_node_to_category() : Decorator
        +SocketTypes : ne.socket_types.SocketTypes
        +InputSocket() : ne.annotations_internal.NodeSocketInput
        +OutputSocket() : ne.annotations_internal.NodeSocketOutput
    }

    class ACK.Data {
        +AddonPreferences : data.AddonPreferences
        +PropertyGroup : data.PropertyGroup
        +Prop : data.props.PropertyTypes
        +PropTyped : data.props_typed.WrappedTypedPropertyTypes
        +register_property() : data.helpers.register_property
        +subscribe_to_rna() : data.subscriptions.subscribe_to_rna_change
    }

    class ACK.App {
        +Handler : app.handlers.Handlers
        +Timer : app.timer.new_timer_as_decorator
    }

    class AutoCode {
        +OPS()
        +ICONS()
        +TYPES()
    }
    
    class CallbackDict {
       +add_callback()
       +call_callbacks()
       +clear_callbacks() 
    }

    class Polling {
        +MODE
        +CONTEXT_MEMBER
        +_decorator()
    }

    class flags {
        <<Module>>
        +OPERATOR
        +MODAL
        +PANEL
        +NODE_CATEGORY
    }

    class metadata {
        <<Module>>
        +Operator()
        +Node()
        +NodeSocket()
    }
    
    class BaseOperator {
      <<Abstract>>
      bl_idname: str
      bl_label: str
    }
    
    class GenericOperator {
      <<ops.btypes.Generic>>
    }
    
    class BasePanel {
      <<Abstract>>
      bl_idname: str
      bl_label: str
    }
    
    class Panel {
       <<ui.btypes.Panel>>
    }
    
    class BaseNode {
       <<Abstract>>
      bl_idname: str
      bl_label: str
    }
    
    class Node {
      <<ne.btypes.Node>>
    }
    
    class BaseSocket {
       <<Abstract>>
      bl_idname: str
      bl_label: str
    }
    
    class NodeSocket {
      <<ne.btypes.NodeSocket>>
    }
    
    class PropertyGroup {
       <<data.PropertyGroup>>
    }
    
    class AddonPreferences {
       <<data.AddonPreferences>>
    }

    AddonLoader --> reg_utils : Uses
    AddonLoader --> CallbackDict : Aggregates
    AddonLoader ..> AutoCode : Calls (optional)
    
    ACK ..> ACK.Ops : Provides
    ACK ..> ACK.UI : Provides
    ACK ..> ACK.NE : Provides
    ACK ..> ACK.Data : Provides
    ACK ..> ACK.App : Provides
    ACK ..> Polling : Provides
    ACK ..> PropertyTypes : Provides
    ACK ..> WrappedTypedPropertyTypes : Provides

    ACK.Ops ..> metadata : Uses (Operator decorator)
    ACK.Ops ..> flags : Uses (OPERATOR flags)
    ACK.Ops ..> ops.btypes.Generic : Aliases
    ACK.Ops ..> ops.btypes.Action : Aliases
    ACK.Ops ..> ops.btypes.Modal : Aliases
    
    ACK.UI ..> flags : Uses (PANEL flags)
    ACK.UI ..> ui.btypes.Panel : Aliases
    ACK.UI ..> ui.btypes.Menu : Aliases
    
    ACK.NE ..> metadata : Uses (Node, Socket decorators)
    ACK.NE ..> flags : Uses (NODE_CATEGORY decorator)
    ACK.NE ..> ne.btypes.Node : Aliases
    ACK.NE ..> ne.btypes.NodeTree : Aliases
    ACK.NE ..> ne.btypes.NodeSocket : Aliases
    ACK.NE ..> ne.socket_types.SocketTypes : Aliases
    ACK.NE ..> ne.annotations_internal.NodeSocketInput : Calls
    ACK.NE ..> ne.annotations_internal.NodeSocketOutput : Calls
    
    ACK.Data ..> data.AddonPreferences : Aliases
    ACK.Data ..> data.PropertyGroup : Aliases
    ACK.Data ..> data.props.PropertyTypes : Aliases
    ACK.Data ..> data.props_typed.WrappedTypedPropertyTypes : Aliases
    ACK.Data ..> data.helpers : Uses
    ACK.Data ..> data.subscriptions : Uses
    
    ACK.App ..> app.handlers.Handlers : Aliases
    ACK.App ..> app.timer : Uses
    
    ops.btypes.Generic --|> BaseOperator
    ops.btypes.Action --|> ops.btypes.Generic
    ops.btypes.Modal --|> ops.btypes.Generic
    
    ui.btypes.Panel --|> BasePanel
    ui.btypes.Menu --|> BasePanel
    
    ne.btypes.Node --|> BaseNode
    ne.btypes.NodeSocket --|> BaseSocket
    
    Polling ..> ACK : Decorates classes used with ACK

```

**Notes:**

*   The diagram is simplified and focuses on major components and their relationships, particularly how the `ACK` facade connects them.
*   `btypes` subdirectories within `ops`, `ui`, `ne`, `data` likely contain the actual base classes that inherit from `bpy.types` and potentially `ackit.core.BaseType`.
*   The exact contents and purpose of `registry` and `types` top-level folders require further inspection if they contain significant logic.
*   Dotted lines (`..>`) indicate potential usage or aliasing, while solid lines (`-->`) indicate stronger dependencies like composition or direct calls.
*   Inheritance is shown with `--|>`. `<<Abstract>>` indicates a conceptual base class, while `<<Module>>` indicates a utility module, and `<<Facade>>` denotes the Facade pattern.

</rewritten_file> 